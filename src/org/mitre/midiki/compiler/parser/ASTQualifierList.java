/* Generated By:JJTree: Do not edit this line. ASTQualifierList.java */

/****************************************************************************
 *
 * Copyright (C) 2004. The MITRE Corporation (http://www.mitre.org/). All Rights Reserved.
 * Consult the LICENSE file in the root of the distribution for terms and restrictions.
 *
 *       Release: 1.0
 *       Date: 24-August-2004
 *       Author: Carl Burke
 *
 *****************************************************************************/
package org.mitre.midiki.compiler.parser;

import java.util.*;

public class ASTQualifierList extends SimpleNode {
    private String qualtype;
    public void setQualType(String q)
    {
        qualtype = q;
    }
    public String getQualType()
    {
        return qualtype;
    }

  public ASTQualifierList(int id) {
    super(id);
  }

  public ASTQualifierList(MKParser p, int id) {
    super(p, id);
  }


  /** Accept the visitor. **/
  public Object jjtAccept(MKParserVisitor visitor, Object data) {
    return visitor.visit(this, data);
  }

    /* A '.'-qualified list probes downward from an externally
     * specified class or instance.
     */
    public void generateForwardProbe(LinkedList buffer, int holdback)
    {
        MKInstruction mkin = null;
        if (children == null) return;
        for (int i = 0; i < (children.length-holdback); ++i) {
            ASTDotQualifier dqn = (ASTDotQualifier)children[i];
            if (dqn != null) {
                if (dqn.children != null) {
                    ASTDesignator ds = (ASTDesignator)dqn.children[0];
                    if (ds.children != null) {
                        if (ds.children[0] instanceof ASTIdentifier) {
                            ASTIdentifier idn = (ASTIdentifier)ds.children[0];
                            mkin = new MKInstruction(MKInstruction.MKIN_FMNAME,
                                                             idn.getName());
                            mkin.setLexicalHook(this);
                            buffer.addLast(mkin);
                        } else if (ds.children[0] instanceof ASTVariable) {
                            ASTVariable vrn = (ASTVariable)ds.children[0];
                            mkin = new MKInstruction(MKInstruction.MKIN_FMINST,
                                                             vrn.getName());
                            mkin.setLexicalHook(this);
                            buffer.addLast(mkin);
                        } else {
                        }
                    }
                }
            }
        }
    }

    /* A '#'-qualified name probes upward from a class or instance
     * which is previously specified. Effectively, that means probing
     * backward from a class or instance.
     */
    public void generateBackwardProbe(LinkedList buffer, int holdback)
    {
        MKInstruction mkin = null;
        if (children == null) return;
        for (int i = children.length-1; i >= holdback; --i) {
            ASTHashQualifier dqn = (ASTHashQualifier)children[i];
            if (dqn != null) {
                if (dqn.children != null) {
                    ASTDesignator ds = (ASTDesignator)dqn.children[0];
                    if (ds.children != null) {
                        if (ds.children[0] instanceof ASTIdentifier) {
                            ASTIdentifier idn = (ASTIdentifier)ds.children[0];
                            if (i==0) {
                                mkin = new MKInstruction(MKInstruction.MKIN_FVNAME,
                                                                 idn.getName());
                                mkin.setLexicalHook(this);
                                buffer.addLast(mkin);
                            } else {
                                mkin = new MKInstruction(MKInstruction.MKIN_FMNAME,
                                                                 idn.getName());
                                mkin.setLexicalHook(this);
                                buffer.addLast(mkin);
                            }
                        } else if (ds.children[0] instanceof ASTVariable) {
                            ASTVariable vrn = (ASTVariable)ds.children[0];
                            if (i==0) {
                                mkin = new MKInstruction(MKInstruction.MKIN_FVINST,
                                                                 vrn.getName());
                                mkin.setLexicalHook(this);
                                buffer.addLast(mkin);
                            } else {
                                mkin = new MKInstruction(MKInstruction.MKIN_FMINST,
                                                                 vrn.getName());
                                mkin.setLexicalHook(this);
                                buffer.addLast(mkin);
                            }
                        } else {
                        }
                    }
                }
            }
        }
    }
}
