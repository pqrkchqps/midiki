/****************************************************************************
 *
 * Copyright (C) 2004. The MITRE Corporation (http://www.mitre.org/). All Rights Reserved.
 * Consult the LICENSE file in the root of the distribution for terms and restrictions.
 *
 *       Release: 1.0
 *       Date: 24-August-2004
 *       Author: Carl Burke
 *
 *****************************************************************************/
/*
 * Script transformation viewer for the MITRE Dialogue Toolkit.
 * The interface presents two panels to the user. On the left is
 * the source XML document. On the right is the file generated by
 * applying the selected template.
 */

package org.mitre.midiki.compiler;

import javax.swing.*;
import javax.swing.text.*;
import javax.swing.event.*;
import javax.swing.undo.*;

import javax.swing.AbstractAction;
import javax.swing.Action;

import javax.swing.border.TitledBorder;

import javax.swing.JMenuItem;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JMenu;
import javax.swing.JMenuBar;

import java.awt.*;              //for layout managers
import java.awt.event.*;        //for action and window events

import javax.xml.parsers.*;
import javax.xml.transform.*;
import javax.xml.transform.stream.*;
import javax.xml.transform.dom.*;
import org.w3c.dom.*;
import org.xml.sax.*;

import java.io.*;
import java.io.IOException;

import java.util.*;

import org.mitre.midiki.compiler.parser.*;

public class ScriptTransformViewer extends JFrame
                             implements ActionListener {
    protected JLabel actionLabel;
    protected JMenu templateMenu;

    // actions, hung off the menu at first
    // file actions
    protected Action fileOpenAction;
    protected Action fileNewAction;
    protected Action fileSaveAction;
    protected Action fileSaveAsAction;
    protected Action fileExitAction;

    protected JPanel contentPane;
    protected JTextPane sourcePane;
    protected JTextPane targetPane;
    protected JFileChooser fc;
    protected UndoManager undo;

    protected JSplitPane commonPane;
    protected JSplitPane splitPane;
    protected JComboBox langspecCB;
    protected JComboBox functionCB;
    protected JComboBox tgtlangCB;
    protected JButton goButton;

    protected MKParser parser = null;
    protected int errorIndex = 0;

    public ScriptTransformViewer() {
        super("ScriptTransformViewer");

        //Create panel to select and display transformation parameters.
        JPanel selectionPanel = new JPanel();
        GridLayout grid = new GridLayout(2,4);
        selectionPanel.setLayout(grid);
        selectionPanel.add(new JLabel("Template language"));
        selectionPanel.add(new JLabel("Template function"));
        selectionPanel.add(new JLabel("Target language"));
        selectionPanel.add(new JLabel(""));
        langspecCB = new JComboBox();
        langspecCB.setActionCommand("lang");
        langspecCB.addActionListener(this);
        functionCB = new JComboBox();
        functionCB.setActionCommand("func");
        functionCB.addActionListener(this);
        tgtlangCB = new JComboBox();
        tgtlangCB.setActionCommand("tgt");
        tgtlangCB.addActionListener(this);
        goButton = new JButton("GO!");
        goButton.setActionCommand("go");
        goButton.addActionListener(this);
        selectionPanel.add(langspecCB);
        selectionPanel.add(functionCB);
        selectionPanel.add(tgtlangCB);
        selectionPanel.add(goButton);

        //Create text panes.
        sourcePane = createTextPane();
        JScrollPane sourceScrollPane = new JScrollPane(sourcePane);
        sourceScrollPane.setVerticalScrollBarPolicy(
                        JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        sourceScrollPane.setPreferredSize(new Dimension(700, 400));
        sourceScrollPane.setMinimumSize(new Dimension(10, 10));
        targetPane = createTextPane();
        JScrollPane targetScrollPane = new JScrollPane(targetPane);
        targetScrollPane.setVerticalScrollBarPolicy(
                        JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
        targetScrollPane.setPreferredSize(new Dimension(700, 400));
        targetScrollPane.setMinimumSize(new Dimension(10, 10));

        //Put the source pane and the target pane in a split pane.
        commonPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT,
                                    sourceScrollPane,
                                    targetScrollPane);
        commonPane.setOneTouchExpandable(true);
        addWindowListener((WindowListener)new WindowAdapter() {
                public void windowOpened(WindowEvent e) {
                    commonPane.setDividerLocation(0.5);
                }
            });

        //Put the data pane and the text pane in a split pane.
        splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT,
                                   selectionPanel,
                                   commonPane);
        splitPane.setOneTouchExpandable(true);

        //Put everything in the frame.
        contentPane = new JPanel();
        BoxLayout box = new BoxLayout(contentPane, BoxLayout.X_AXIS);
        contentPane.setLayout(box);
        contentPane.add(splitPane);
        scriptTitle = BorderFactory.createTitledBorder("Loading");
        contentPane.setBorder(BorderFactory.createCompoundBorder(
                        scriptTitle,
                        BorderFactory.createEmptyBorder(5,5,5,5)));

        setContentPane(contentPane);
        setJMenuBar(buildMenuBar());

        // create the file chooser
        userDir = System.getProperty("user.dir");
        userHome = System.getProperty("user.home");
        mkitHome = System.getProperty("mkit.home", userHome);
        fileSep = System.getProperty("file.separator");
        try {
            File homeDir = new File(userDir);
            fc = new JFileChooser(userDir);
            MKFileFilter mkfilt = new MKFileFilter();
            mkfilt.addExtension("xml");
            mkfilt.setDescription("Compiled script files (XML)");
            fc.setFileFilter(mkfilt);
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(0);
        }

        loadTemplateDatabase();
        setScriptTitle();
    }

    private boolean scriptChanged;
    private String scriptName;
    private String scriptBaseName;
    private File scriptFile;
    private TitledBorder scriptTitle;
    private String userDir;
    private String userHome;
    private String mkitHome;
    private String fileSep;

    private void setScriptTitle()
    {
        if (scriptName == null)
            scriptTitle.setTitle("*no script*");
        else
            scriptTitle.setTitle(scriptName);
        contentPane.repaint(contentPane.getVisibleRect());
    }

    // opening a file or creating a new file must reset all parser variables.
    // also check to make sure the undo/redo histories are cleared.
    private void newScript()
    {
        /*
        scriptName = "*new script*";
        scriptFile = null;
        scriptChanged = false;
        setScriptTitle();
        scriptExecutionContext = null;
        StyledEditorKit dsek = new StyledEditorKit();
        javax.swing.text.Document doc = dsek.createDefaultDocument();
        targetPane.setEditorKit(dsek);
        targetPane.setDocument(doc);
        */
    }

    private void openScript()
    {
        int returnVal = fc.showOpenDialog(this);
                        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            scriptFile = fc.getSelectedFile();
            scriptName = scriptFile.getName();
            scriptBaseName = scriptName;
            StyledEditorKit dsek = new StyledEditorKit();
            javax.swing.text.Document doc = dsek.createDefaultDocument();
            try {
                FileReader fr = new FileReader(scriptFile);
                dsek.read(fr, doc, 0);
                fr.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
            sourcePane.setEditorKit(dsek);
            sourcePane.setDocument(doc);
        } else {
            return;
        }
        scriptChanged = false;
        setScriptTitle();
        contentPane.repaint(contentPane.getVisibleRect());
    }

    private boolean askSaveScript()
    {
        if (!scriptChanged) return false;
        // ask the user if they want to save the current file.
        int decision = JOptionPane.showConfirmDialog(this,
                                      "The current script has been changed. "+
                                      "Would you like to save your changes?",
                                      "File has changed",
                                      JOptionPane.YES_NO_CANCEL_OPTION,
                                      JOptionPane.QUESTION_MESSAGE);
        if (decision == JOptionPane.YES_OPTION) {
            //if (scriptName.equals("*new script*")) {
                saveScriptAs();
                //} else {
                //    saveScript();
                //}
        } else if (decision == JOptionPane.NO_OPTION) {
            return false;
        } else if (decision == JOptionPane.CANCEL_OPTION) {
            return true;
        }        // returns true if the user cancels this function
        return false;
    }

    private void saveScript()
    {
        scriptChanged = false;
        try {
            FileWriter fw = new FileWriter(scriptFile);
            javax.swing.text.Document doc = targetPane.getDocument();
            targetPane.getEditorKit().write(fw, doc, 0, doc.getLength());
            fw.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private boolean askOverwrite()
    {
        // ask the user if they want to overwrite an existing file.
        int decision = JOptionPane.showConfirmDialog(this,
                                      "The specified file already exists. "+
                                      "Would you like to replace that file "+
                                      "with this script?",
                                      "File exists",
                                      JOptionPane.YES_NO_OPTION,
                                      JOptionPane.QUESTION_MESSAGE);
        if (decision == JOptionPane.YES_OPTION) {
            return true;
        }
        return false;
    }

    private void saveScriptAs()
    {
        boolean checking = true;

        while (checking) {
            // propose a file to save the result in
            if (scriptFile != null) {
                //String outName = scriptFile.getName();
                String outName = scriptBaseName;
                String outPath = scriptFile.getParent();
                int dotpos = outName.indexOf('.');
                Iterator it = db_realize.iterator();
                String[] ls = (String[])it.next(); // discard header line
                String suffix = "";
                String extension = "txt";
                while (it.hasNext()) {
                    ls = (String[])it.next();
                    if (ls[0].equals(selectedFunction)) {
                        suffix = ls[3];
                        extension = ls[4];
                    }
                }
                outName = outName.substring(0,dotpos)+suffix+"."+extension;
                File outCandidate = new File(outPath, outName);
                fc.setSelectedFile(outCandidate);
            }
            // ask the user to verify
            int returnVal = fc.showSaveDialog(this);
            if (returnVal == JFileChooser.APPROVE_OPTION) {
                scriptFile = fc.getSelectedFile();
                if (scriptFile.exists()) {
                    if (!askOverwrite()) continue;
                }
                scriptName = scriptFile.getName();
                setScriptTitle();
                contentPane.repaint(contentPane.getVisibleRect());
                saveScript();
                break;
            } else {
                return; //save aborted
            }
        }
    }

    private Hashtable actions;

    private void createActionTable(JTextComponent textComponent) {
        actions = new Hashtable();
        Action[] actionsArray = textComponent.getActions();
        for (int i = 0; i < actionsArray.length; i++) {
            Action a = actionsArray[i];
            actions.put(a.getValue(Action.NAME), a);
        }
    }    

    private Action getActionByName(String name) {
        return (Action)(actions.get(name));
    }

    private void buildActions()
    {
        // file actions
        fileOpenAction = new AbstractAction("Open...", null) {
                public void actionPerformed(ActionEvent e) {
                    if (askSaveScript()) return;
                    openScript();
                }
            };
        fileNewAction = new AbstractAction("New", null) {
                public void actionPerformed(ActionEvent e) {
                    if (askSaveScript()) return;
                    newScript();
                }
            };
        fileSaveAction = new AbstractAction("Save", null) {
                public void actionPerformed(ActionEvent e) {
                    //if (scriptName.equals("*new script*")) {
                        saveScriptAs();
                        //} else {
                        //    saveScript();
                        //}
                }
            };
        fileSaveAsAction = new AbstractAction("Save As...", null) {
                public void actionPerformed(ActionEvent e) {
                    saveScriptAs();
                }
            };
        fileExitAction = new AbstractAction("Exit", null) {
                public void actionPerformed(ActionEvent e) {
                    if (askSaveScript()) return;
                    System.exit(0);
                }
            };
    }

    public JMenuBar buildMenuBar()
    {
        JMenuItem mi;
        buildActions();
        JMenuBar mb = new JMenuBar();
        JMenu fileMenu = new JMenu("File");
        fileMenu.setMnemonic(KeyEvent.VK_F);
        mi = new JMenuItem(fileNewAction);
        mi.setMnemonic(KeyEvent.VK_N);
        fileMenu.add(mi);
        mi = new JMenuItem(fileOpenAction);
        mi.setMnemonic(KeyEvent.VK_O);
        mi.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O,
                                                 ActionEvent.CTRL_MASK));
        fileMenu.add(mi);
        mi = new JMenuItem(fileSaveAction);
        mi.setMnemonic(KeyEvent.VK_S);
        mi.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,
                                                 ActionEvent.CTRL_MASK));
        fileMenu.add(mi);
        mi = new JMenuItem(fileSaveAsAction);
        mi.setMnemonic(KeyEvent.VK_A);
        fileMenu.add(mi);
        mi = new JMenuItem(fileExitAction);
        mi.setMnemonic(KeyEvent.VK_X);
        mi.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_Q,
                                                 ActionEvent.CTRL_MASK));
        fileMenu.add(mi);
        mb.add(fileMenu);
        return mb;
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("go")) {
            transformSourceToTarget();
        } else if (e.getActionCommand().equals("lang")) { 
            // clear func and tgt, update func
            selectedLangspec = 
                (String)((DefaultComboBoxModel)langspecCB.getModel()).getSelectedItem();
            selectedFunction = null;
            ((DefaultComboBoxModel)functionCB.getModel()).removeAllElements();
            ((DefaultComboBoxModel)tgtlangCB.getModel()).removeAllElements();
            Iterator it = db_functions.iterator();
            String[] ls = (String[])it.next(); // discard header line
            while (it.hasNext()) {
                ls = (String[])it.next();
                if (!ls[0].equals(selectedLangspec)) continue;
                ((DefaultComboBoxModel)functionCB.getModel()).addElement(ls[1]);
            }
        } else if (e.getActionCommand().equals("func")) { 
            // clear tgt, update tgt
            selectedFunction = 
                (String)((DefaultComboBoxModel)functionCB.getModel()).getSelectedItem();
            ((DefaultComboBoxModel)tgtlangCB.getModel()).removeAllElements();
            Iterator it = db_realize.iterator();
            String[] ls = (String[])it.next(); // discard header line
            while (it.hasNext()) {
                ls = (String[])it.next();
                if (ls[0]==null) continue;
                if (!ls[0].equals(selectedFunction)) continue;
                selectedTemplate = ls[2];
                ((DefaultComboBoxModel)tgtlangCB.getModel()).addElement(ls[1]);
            }
        } else if (e.getActionCommand().equals("tgt")) { 
        } else {
        }
    }

    private String selectedLangspec;
    private String selectedFunction;
    private String selectedTemplate;

    private JTextPane createTextPane() {
        JTextPane targetPane = new JTextPane();
        initStylesForTextPane(targetPane);
        return targetPane;
    }

    protected void initStylesForTextPane(JTextPane targetPane) {
        //Initialize some styles.
        Style def = StyleContext.getDefaultStyleContext().
                                        getStyle(StyleContext.DEFAULT_STYLE);

        Style regular = targetPane.addStyle("regular", def);
        StyleConstants.setFontFamily(def, "SansSerif");

        Style s = targetPane.addStyle("italic", regular);
        StyleConstants.setItalic(s, true);

        s = targetPane.addStyle("bold", regular);
        StyleConstants.setBold(s, true);

        s = targetPane.addStyle("small", regular);
        StyleConstants.setFontSize(s, 10);

        s = targetPane.addStyle("large", regular);
        StyleConstants.setFontSize(s, 16);
    }

    private void loadCsvDatabase(String file, int fields, LinkedList tgt)
    {
        try {
            BufferedReader br = new BufferedReader(new FileReader(file));
            for (;;) {
                String line = br.readLine();
                if (line == null) break;
                StringTokenizer st = new StringTokenizer(line, ",\n");
                String[] rowdata = new String[fields];
                for (int idx=0; st.hasMoreTokens(); idx++) {
                    rowdata[idx] = st.nextToken().trim();
                }
                tgt.addLast(rowdata);
            }
            br.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private LinkedList db_realize; // function,implementation,template_file
    private LinkedList db_functions; // language_spec,function
    private LinkedList db_langspecs; // language_spec,spec_file

    private void loadTemplateDatabase()
    {
        db_realize = new LinkedList();
        db_functions = new LinkedList();
        db_langspecs = new LinkedList();
        loadCsvDatabase("db_realize.csv", 5, db_realize);
        loadCsvDatabase("db_functions.csv", 2, db_functions);
        loadCsvDatabase("db_langspecs.csv", 2, db_langspecs);
        // add the available language specs
        Iterator it = db_langspecs.iterator();
        String[] ls = (String[])it.next(); // discard header line
        while (it.hasNext()) {
            ls = (String[])it.next();
            ((DefaultComboBoxModel)langspecCB.getModel()).addElement(ls[0]);
        }
    }

    private void transformSourceToTarget()
    {
        if (selectedLangspec==null) return;
        if (selectedFunction==null) return;
        if (selectedTemplate==null) return;
        try {
            // in order to do validation, must enable validation
            // and set a SAXErrorHandler.
            DocumentBuilderFactory dbFac =
                DocumentBuilderFactory.newInstance();
            dbFac.setValidating(true);
            dbFac.setNamespaceAware(true);
            // May need next line for compatibility with future
            // versions of Xerces
            dbFac.setAttribute("http://xml.org/sax/features/validation", new Boolean(true));
            dbFac.setAttribute("http://apache.org/xml/features/validation/schema", new Boolean(true));
            DocumentBuilder db = dbFac.newDocumentBuilder();
            db.setErrorHandler(new ScriptTransformerErrorHandler());
            // make an input source from the document
            javax.swing.text.Document srcdoc = sourcePane.getDocument();
            String docText = srcdoc.getText(0, srcdoc.getLength());
            InputSource ss = new InputSource(new StringReader(docText));
            // parse the source
            org.w3c.dom.Document doc = db.parse(ss);
            DOMSource ds = new DOMSource(doc.getDocumentElement());
            // prepare for transformation
            TransformerFactory trFac = TransformerFactory.newInstance();
            // make a source for the template
            StreamSource trSource = new StreamSource(selectedTemplate);
            // get the Transformer
            Transformer tr = trFac.newTransformer(trSource);
            // make an output result string writer
            StringWriter sw = new StringWriter();
            StreamResult sr = new StreamResult(sw);
            // transform the base template
            tr.transform(ds, sr);
            // now put the results in the target pane
            javax.swing.text.Document tgtdoc = targetPane.getDocument();
            tgtdoc.remove(0, tgtdoc.getLength());
            tgtdoc.insertString(0, sw.toString(), (AttributeSet)null);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        JFrame frame = new ScriptTransformViewer();

        frame.addWindowListener(new WindowAdapter() {
            public void windowClosing(WindowEvent e) {
                System.exit(0);
            }
        });

        frame.pack();
        frame.setVisible(true);
    }
}

